{{- if .Values.print.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.fullname" ( dict "root" . "service" .Values.print ) }}
  {{- include "common.metadata" ( dict "root" . "service" .Values.print ) | nindent 2 }}
spec:
  replicas: {{ .Values.print.replicaCount }}
  revisionHistoryLimit: {{ .Values.global.revisionHistoryLimit | default 0 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      {{- if (gt .Values.print.replicaCount 1.0) }}
      # The print uses a lot of resources and cannot be installed twice on a node.
      # So we stop an old POD before starting a new one.
      maxSurge: 0
      {{- else }}
      maxSurge: 1
      {{- end }}
      maxUnavailable: 25%
  selector:
    matchLabels: {{ include "common.selectorLabels" ( dict "root" . "service" .Values.print ) | nindent 6 }}
  template:
    metadata: {{- include "common.podMetadata" ( dict "root" . "service" .Values.print ) | nindent 6 }}
    spec:
      {{- include "common.podConfig" ( dict "root" . "service" .Values.print ) | nindent 6 }}
      initContainers:
        - name: jmx-exporter
          {{- include "common.containerConfig" ( dict "root" . "container" .Values.print.jmxExporter ) | nindent 10 }}
          command:
            - /bin/bash
            - -c
          args:
            - cp /opt/bitnami/jmx-exporter/jmx_prometheus_javaagent.jar /jmx-exporter-jar/
          volumeMounts:
            - mountPath: /jmx-exporter-jar
              name: jmx-exporter-jar
      containers:
        - name: config
          {{- include "common.containerConfig" ( dict "root" . "container" .Values.print.config ) | nindent 10 }}
          args: ['shared-config-slave']
          volumeMounts:
            - mountPath: /config
              name: configs
            - name: masterconfig
              readOnly: true
              mountPath: /etc/shared_config_manager
          readinessProbe: &configProbe
            exec:
              command:
                - scm-is-ready
            initialDelaySeconds: 30
            periodSeconds: 30
            failureThreshold: 5
          livenessProbe:
            <<: *configProbe
            periodSeconds: 120
{{- if .Values.prometheus.enabled }}
          ports:
            - name: prometheus-conf
              containerPort: 9111
              protocol: TCP
{{- end }}
        - name: print
          {{- include "common.containerConfig" ( dict "root" . "container" .Values.print ) | nindent 10 }}
          {{- with .Values.print.command }}
          command: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.print.args }}
          args: {{ toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: configs
              mountPath: /usr/local/tomcat/webapps/ROOT/print-apps
            - name: web-xml
              mountPath: /usr/local/tomcat/webapps/ROOT/WEB-INF/web.xml
              subPath: web.xml
            - name: jmx-exporter-config
              mountPath: /usr/local/tomcat/jmx-exporter.yaml
              subPath: jmx-exporter.yaml
            - mountPath: /usr/local/tomcat/jmx-lib
              name: jmx-exporter-jar
            {{- range $name, $path := .Values.print.volumes }}
            - name: {{ $name }}
              mountPath: {{ $path }}
            {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
{{- if .Values.prometheus.enabled }}
            - name: prometheus
              containerPort: 9110
              protocol: TCP
{{- end }}
          readinessProbe:
            httpGet:
              path: /print/metrics/ping?health_check=true
              port: http
            initialDelaySeconds: 15
            periodSeconds: 30
          livenessProbe:
            exec:
              # Be sure that the EPSG 2056 exists, see: https://jira.camptocamp.com/browse/GSGMF-1606
              command:
                - curl
                - http://localhost:8080/print/examples:simple/buildreport.pdf
                - --data-raw
                - spec=%7B%0D%0A++++%22layout%22%3A+%22A4+portrait%22%2C%0D%0A++++%22attributes%22%3A+%7B%22map%22%3A+%7B%0D%0A++++++++%22center%22%3A+%5B%0D%0A++++++++++++1200000%2C%0D%0A++++++++++++2600000%0D%0A++++++++%5D%2C%0D%0A++++++++%22rotation%22%3A+0%2C%0D%0A++++++++%22longitudeFirst%22%3A+true%2C%0D%0A++++++++%22layers%22%3A+%5B%5D%2C%0D%0A++++++++%22scale%22%3A+100000000%2C%0D%0A++++++++%22projection%22%3A+%22EPSG%3A2056%22%2C%0D%0A++++++++%22dpi%22%3A+72%0D%0A++++%7D%7D%0D%0A%7D
            initialDelaySeconds: 15
            failureThreshold: 50
            periodSeconds: 120
          lifecycle:
            preStop:
              exec:
                command: ['/bin/bash', '-c', '/usr/local/tomcat/bin/docker_pre_stop_print.sh $(PRINT_TERMINATION_GRACE_PERIOD_SECONDS) || true']
      volumes:
        - name: configs
          emptyDir: {}
        - name: jmx-exporter-jar
          emptyDir: {}
        - name: masterconfig
          configMap:
            name: {{ include "common.fullname" ( dict "root" . "service" .Values.sharedConfig ) }}
        - name: web-xml
          configMap:
            name: {{ include "common.fullname" ( dict "root" . "service" .Values.print ) }}
            items:
              - key: web.xml
                path: web.xml
        - name: jmx-exporter-config
          configMap:
            name: {{ include "common.fullname" ( dict "root" . "service" .Values.print ) }}
            items:
              - key: jmx-exporter.yaml
                path: jmx-exporter.yaml
        {{- range $name, $path := .Values.print.volumes }}
        - name: {{ $name }}
          emptyDir: {}
        {{- end }}
{{- end }}
