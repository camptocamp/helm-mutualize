{{- if .Values.home.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.fullname" ( dict "root" . "service" .Values.home ) }}
  {{- include "common.metadata" ( dict "root" . "service" .Values.home ) | nindent 2 }}
spec:
  replicas: {{ .Values.home.replicaCount }}
  revisionHistoryLimit: {{ .Values.global.revisionHistoryLimit | default 0 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      {{- if (gt .Values.home.replicaCount 1.0) }}
      # The print uses a lot of resources and cannot be installed twice on a node.
      # So we stop an old POD before starting a new one.
      maxSurge: 0
      {{- else }}
      maxSurge: 1
      {{- end }}
      maxUnavailable: 25%
  selector:
    matchLabels: {{ include "common.selectorLabels" ( dict "root" . "service" .Values.home ) | nindent 6 }}
  template:
    metadata: {{- include "common.podMetadata" ( dict "root" . "service" .Values.home ) | nindent 6 }}
    spec:
      {{- include "common.podConfig" ( dict "root" . "service" .Values.home ) | nindent 6 }}
      containers:
        - name: nginx
          {{- include "common.containerConfig" ( dict "root" . "container" .Values.home ) | nindent 10 }}
          volumeMounts:
            - name: html
              readOnly: true
              mountPath: /usr/share/nginx/html
            - name: config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: tmp
              mountPath: /tmp
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe: &probe
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            failureThreshold: 5
          livenessProbe:
            <<: *probe
            periodSeconds: 120
      volumes:
        - name: html
          configMap:
            name: {{ include "common.fullname" ( dict "root" . "service" .Values.home ) }}-html
        - name: config
          configMap:
            name: {{ include "common.fullname" ( dict "root" . "service" .Values.home ) }}-config
        - name: tmp
          emptyDir: {}
{{- end }}
