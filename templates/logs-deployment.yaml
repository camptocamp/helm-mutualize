apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "mapfishprint.fullname" . }}-logs
  labels:
    app: {{ template "mapfishprint.fullname" . }}
    chart: {{ template "mapfishprint.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    service: logs
  {{- if .Values.openshift }}
  annotations:
    image.openshift.io/triggers: |
      [
        {{ template "mapfishprint.trigger" (dict "image" "config" "tag" .Values.config.image.tag "container" "logs-config" "root" . ) }},
        {{ template "mapfishprint.trigger" (dict "image" "logs" "tag" .Values.logs.image.tag "container" "logs" "root" . ) }}
      ]
  {{- end }}
spec:
  replicas: {{ .Values.logs.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "mapfishprint.fullname" . }}
      release: {{ .Release.Name }}
      service: logs
  template:
    metadata:
      labels:
        app: {{ template "mapfishprint.fullname" . }}
        release: {{ .Release.Name }}
        service: logs
    spec:
      {{- include "common.podConfig" (dict "service" .Values.logs "root" .) | indent 6 }}
      containers:
        - name: logs-config
          {{- template "sharedConfig" (dict "service" "logs_config" "root" .) }}
            - name: TAG_FILTER
              value: master
            - name: API_BASE_URL
              value: http://{{ template "mapfishprint.fullname" . }}-shared-config/scm
          args: ['shared-config-slave']
          volumeMounts:
            - mountPath: /master_config
              name: master-config
          {{- include "common.containerConfig" (dict "service" .Values.config.slave "root" .) | indent 10 }}
        - name: logs
          {{- if .Values.openshift }}
          image: " "
          {{- else }}
          image: {{ .Values.logs.image.name }}:{{ .Values.logs.image.tag }}
          {{- end }}
          imagePullPolicy: {{ .Values.openshift | ternary "IfNotPresent" .Values.image.pullPolicy }}
          volumeMounts:
            - mountPath: /master_config
              name: master-config
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            {{- include "statsd.config" (dict "service" "logs" "root" .)  | nindent 12 }}

            - name: PGPORT
              value: '5432'
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.secret }}
                  key: hostnameSlave
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.secret }}
                  key: hostnameSlave
            - name: PGHOST_MASTER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.secret }}
                  key: hostname
            - name: DB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.secret }}
                  key: database
            - name: PGDATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.secret }}
                  key: database
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.secret }}
                  key: username
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.secret }}
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.secret }}
                  key: password
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.secret }}
                  key: password
            - name: DB_SCHEMA
              value: {{ .Values.print.dbSchema }}
            - name: SQLALCHEMY_URL
              value: &sqlalchemy_url postgresql://$(DB_USERNAME):$(DB_PASSWORD)@$(DB_HOST):5432/$(DB_DATABASE)
            - name: C2C_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "mapfishprint.fullname" . }}
                  key: c2c-secret
            - name: SOURCES_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "mapfishprint.fullname" . }}
                  key: c2c-secret
            - name: C2C_REDIS_HOST
              value: {{ .Values.redis.host }}
            - name: C2C_REDIS_DB
              value: {{ .Values.redis.db | quote }}
            {{- if .Values.redis.sentinel }}
            - name: C2C_REDIS_SERVICENAME
              value: {{ .Values.redis.servicename }}
            - name: C2C_REDIS_TIMEOUT
              value: {{ .Values.redis.timeout | quote }}
            {{- end }}
            - name: C2C_REDIS_PORT
              value: {{ .Values.redis.port | quote }}
            - name: C2C_BROADCAST_PREFIX
              value: broadcast_logs_
            {{- if .Values.c2c.sentry.enabled }}
            - name: SENTRY_URL
              value: https://{{ .Values.c2c.sentry.key }}@{{ .Values.c2c.sentry.hostname }}/{{ .Values.c2c.sentry.project }}
            - name: SENTRY_CLIENT_RELEASE
              value: {{ .Values.logs.image.tag | quote }}
            - name: SENTRY_CLIENT_ENVIRONMENT
              value: {{ .Release.Name }}
            - name: SENTRY_TAG_SERVICE
              value: logs
            {{- end }}
            - name: LOG_TYPE
              value: {{ .Values.c2c.logging.type }}
            {{- if eq .Values.c2c.logging.type "logstash" }}
            - name: LOG_HOST
              value: {{ .Values.c2c.logging.host }}
            - name: LOG_PORT
              value: {{ .Values.c2c.logging.port }}
            {{- end }}
            - name: SHARED_CONFIG_MASTER
              value: /master_config/master/shared_config_manager.yaml
            - name: SCM_URL
              value: http://{{ template "mapfishprint.fullname" . }}-shared-config/scm/
            {{- if .Values.ingress.enabled }}
            - name: SCM_URL_EXTERNAL
              value: https://{{ (index .Values.ingress.hosts 0).host }}/scm
            {{- end }}
            {{- if .Values.logs.elasticsearch.url }}
            - name: ES_URL
              value: {{ .Values.logs.elasticsearch.url }}
            {{- end }}
            - name: ES_INDEXES
              value: {{ .Values.logs.elasticsearch.indexes }}
            - name: ES_FILTERS
              value: kubernetes.labels.release={{ .Release.Name }},kubernetes.labels.service=print
            {{- if .Values.logs.elasticsearch.auth }}
            - name: ES_AUTH
              value: "Basic {{ (printf "%s:%s" .Values.logs.elasticsearch.auth.user .Values.logs.elasticsearch.auth.password) | b64enc }}"
            {{- end }}
          livenessProbe:
            httpGet:
              path: /logs/c2c/health_check?max_level=0
              port: http
            initialDelaySeconds: 20
          readinessProbe:
            httpGet:
              path: /logs/c2c/health_check
              port: http
            initialDelaySeconds: 15
          securityContext:
            runAsNonRoot: true
            {{- if not .Values.openshift }}
            runAsUser: 33  # www-data
            {{- end }}
          {{- include "common.containerConfig" (dict "service" .Values.logs "root" .) | indent 10 }}
      volumes:
        - name: master-config
          emptyDir: {}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
