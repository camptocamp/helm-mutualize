---
# Source: mutualize/templates/home-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: test-mutualize-home
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: home
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mutualize
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: home
---
# Source: mutualize/templates/print-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: test-mutualize-print
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: print
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mutualize
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: print
---
# Source: mutualize/templates/redirect-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: test-mutualize-redirect
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: redirect
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mutualize
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: redirect
---
# Source: mutualize/templates/tilecloudchain-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: test-mutualize-tcc
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: tcc
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mutualize
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: tcc
---
# Source: mutualize/templates/secret.yaml
apiVersion: v1
kind: Secret
type: Generic
metadata:
  name: test-mutualize
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
data:
  id_rsa: dG8gYmUgZGVmaW5lZA==
---
# Source: mutualize/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-mutualize-env
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
  annotations:
    {}
data:
  CHART_NAME: mutualize
  RELEASE_NAME: test
  RELEASE_NAMESPACE: default
  INGRESS_HOST: mutualize.local
  CONFIG_PATH: "/"
  CONFIG_IMAGE_TAG: "3.1"
  PRINT_IMAGE_TAG: "latest"
  TILECLOUDCHAIN_IMAGE_TAG: "latest"
  CONFIG_SERVICE_NAME: test-mutualize-config
  PRINT_SERVICE_NAME: test-mutualize-print
  TILECLOUDCHAIN_SERVICE_NAME: test-mutualize-tcc
---
# Source: mutualize/templates/home-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-mutualize-home-html
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: home
  annotations:
    {}
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <title>Geospatial mutualize services</title>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link
          rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.3/css/bootstrap.min.css"
          integrity="sha512-jnSuA4Ss2PkkikSOLtYs8BlYIeeIK1h99ty4YfvRPAlzr377vr3CXDb7sb7eEEBYjDtcYj+AjBH3FLv5uSJuXg=="
          crossorigin="anonymous"
          referrerpolicy="no-referrer"
        />
        <link
          rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
          integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA=="
          crossorigin="anonymous"
          referrerpolicy="no-referrer"
        />
        <link
          rel="icon"
          type="image/png"
          sizes="32x32"
          href="https://www.camptocamp.com/favicon/favicon-32x32.png"
        />
        <link
          rel="icon"
          type="image/png"
          sizes="16x16"
          href="https://www.camptocamp.com/favicon/favicon-16x16.png"
        />
        <style>
          h1 {
            margin-bottom: 2.5rem;
          }
          a {
            text-decoration: none;
            color: #7f8c8d;
          }
          a:hover {
            text-decoration: underline;
            color: #6a7478;
          }
          .content {
            display: flex;
            margin-top: 1.5rem;
            margin-bottom: 1.5rem;
          }
          .icon {
            font-size: 4rem;
            margin-right: 1rem;
          }
          .text {
            flex: 1;
          }
        </style>
      </head>
      <body class="px-5 py-4">
        <script>
          (() => {
            'use strict'
            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
              document.documentElement.setAttribute('data-bs-theme', 'dark');
            }
          })()
        </script>
        <h1>
          Geospatial mutualize services provided by
          <a href="https://www.camptocamp.com/fr/geospatial_solutions">Camptocamp</a>
        </h1>

        <p>This will provide the following services:</p>
        <div class="content">
          <div class="icon fa-solid fa-print"></div>
          <div style="text">
            <a href="https://example.com/print">Print maps</a><br />
            based on <a href="http://mapfish.github.io/mapfish-print-doc/">MapFish Print</a>.<br />
          </div>
        </div>
        <div class="content">
          <div class="icon fa-solid fa-layer-group"></div>
          <div style="text">
            Generate and publish WMTS tiles<br />
            based on
            <a href="https://github.com/camptocamp/tilecloud-chain/#tilecloud-chain">TileCloud Chain</a><br />
            It will be available on your domain,
            <a href="https://geomapfish-demo-2-7.camptocamp.com/tiles/admin/">example</a>.
          </div>
        </div>
        <div class="content">
          <div class="icon fa-solid fa-share-nodes"></div>
          <div style="text">
            <a href="https://example.com/config/">Config Manager</a><br />
            based on <a href="https://github.com/camptocamp/shared_config_manager/">Shared Config Manager</a>.
          </div>
        </div>
        <p>
          If you are interested, contact us at
          <a href="mailto:info@camptocamp.com">info@camptocamp.com</a>.
        </p>
      </body>
    </html>
---
# Source: mutualize/templates/home-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-mutualize-home-config
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: home
  annotations:
    {}
data:
  nginx.conf: |
    worker_processes  auto;

    error_log  /var/log/nginx/error.log notice;
    pid        /tmp/nginx.pid;


    events {
        worker_connections  1024;
    }


    http {
        proxy_temp_path /tmp/proxy_temp;
        client_body_temp_path /tmp/client_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;

        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  65;

        #gzip  on;

        include /etc/nginx/conf.d/*.conf;
    }
---
# Source: mutualize/templates/print-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-mutualize-print
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: print
data:
  web.xml: |
    <?xml version="1.0" encoding="UTF-8"?>

    <web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            version="3.0"
            xmlns="http://java.sun.com/xml/ns/javaee"
            xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
            metadata-complete="true">

        <absolute-ordering/>

        <context-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>
                classpath*:mapfish-spring-application-context.xml,classpath:mapfish-spring-security.xml,/WEB-INF/mapfish-print-printer-factory.xml,classpath*:mapfish-spring-application-context-override.xml
            </param-value>
        </context-param>

        <listener>
            <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
        </listener>

        <listener>
            <listener-class>org.mapfish.print.metrics.MetricsRegistryContextListener</listener-class>
        </listener>

        <listener>
            <listener-class>org.mapfish.print.metrics.HealthCheckRegistryContextListener</listener-class>
        </listener>

        <listener>
            <listener-class>org.mapfish.print.metrics.MapfishPrintInstrumentedFilterContextListener
            </listener-class>
        </listener>

        <filter>
            <filter-name>requestSizeFilter</filter-name>
            <filter-class>org.mapfish.print.servlet.RequestSizeFilter</filter-class>
            <init-param>
                <!-- The maximum request size in bytes (default: 1 MB). -->
                <param-name>maxContentLength</param-name>
                <param-value>1048576</param-value>
            </init-param>
        </filter>
        <filter-mapping>
            <filter-name>requestSizeFilter</filter-name>
            <url-pattern>/print/*</url-pattern>
        </filter-mapping>

        <filter>
            <filter-name>characterEncodingFilter</filter-name>
            <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
            <init-param>
                <param-name>encoding</param-name>
                <param-value>UTF-8</param-value>
            </init-param>
        </filter>
        <filter-mapping>
            <filter-name>characterEncodingFilter</filter-name>
            <url-pattern>/print/*</url-pattern>
        </filter-mapping>

        <filter>
            <filter-name>springSecurityFilterChain</filter-name>
            <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        </filter>

        <filter-mapping>
            <filter-name>springSecurityFilterChain</filter-name>
            <url-pattern>/print/*</url-pattern>
        </filter-mapping>

        <filter>
            <filter-name>instrumentedFilter</filter-name>
            <filter-class>com.codahale.metrics.servlet.InstrumentedFilter</filter-class>
        </filter>
        <filter-mapping>
            <filter-name>instrumentedFilter</filter-name>
            <url-pattern>/print/*</url-pattern>
        </filter-mapping>

        <filter>
            <filter-name>CORS</filter-name>
            <filter-class>com.thetransactioncompany.cors.CORSFilter</filter-class>
            <init-param>
                <param-name>cors.supportedMethods</param-name>
                <param-value>GET, POST, DELETE, HEAD, OPTIONS</param-value>
            </init-param>
            <init-param>
                <param-name>cors.maxAge</param-name>
                <param-value>86400</param-value>
            </init-param>
            <init-param>
                <param-name>cors.supportsCredentials</param-name>
                <param-value>false</param-value>
            </init-param>
        </filter>
        <filter-mapping>
            <filter-name>CORS</filter-name>
            <url-pattern>/print/*</url-pattern>
        </filter-mapping>

        <servlet>
            <servlet-name>metrics-servlet</servlet-name>
            <servlet-class>com.codahale.metrics.servlets.AdminServlet</servlet-class>
        </servlet>

        <!-- single mapping to spring, this only works properly if the advanced dispatch filter is
            active -->
        <servlet-mapping>
            <servlet-name>metrics-servlet</servlet-name>
            <url-pattern>/print/metrics</url-pattern>
        </servlet-mapping>
        <servlet-mapping>
            <servlet-name>metrics-servlet</servlet-name>
            <url-pattern>/print/metrics/*</url-pattern>
        </servlet-mapping>

        <servlet>
            <servlet-name>mapfish-print</servlet-name>
            <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
            <load-on-startup>1</load-on-startup>
        </servlet>

        <servlet-mapping>
            <servlet-name>mapfish-print</servlet-name>
            <url-pattern>/print/print/*</url-pattern>
        </servlet-mapping>

        <servlet-mapping>
            <servlet-name>mapfish-print</servlet-name>
            <url-pattern>/print/sec/print/*</url-pattern>
        </servlet-mapping>

    </web-app>

  jmx-exporter.yaml: |
    startDelaySeconds: 30
    username:
    password:
    ssl: false
    lowercaseOutputLabelNames: true
    lowercaseOutputName: true
---
# Source: mutualize/templates/tilecloudchain-configmap-mainconfig.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-mutualize-tcc-main-config
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: tcc
data:
  config.yaml: |
    test: 111
    toto: 222
---
# Source: mutualize/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: test-mutualize
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
rules:
- apiGroups:
    - camptocamp.com
  resources:
    - sharedconfigconfigsint
    - sharedconfigsourcesint
    - githubwebhooksint
  verbs:
    - get
    - watch
    - list
    - create
    - update
    - patch
    - delete
---
# Source: mutualize/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: test-mutualize
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
subjects:
- kind: Group
  name: group1
  apiGroup: rbac.authorization.k8s.io
- kind: Group
  name: group2
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: test-mutualize
  apiGroup: rbac.authorization.k8s.io
---
# Source: mutualize/templates/home-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-mutualize-home
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: home
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: home
---
# Source: mutualize/templates/print-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-mutualize-print
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: print
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: print
---
# Source: mutualize/templates/redirect-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-mutualize-redirect
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: redirect
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: redirect
---
# Source: mutualize/templates/shared-config-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-mutualize-config
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: config
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: config
---
# Source: mutualize/templates/tilecloudchain-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-mutualize-tcc
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: tcc
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: tcc
---
# Source: mutualize/templates/home-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-mutualize-home
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: home
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 25%
  selector:
    matchLabels:
      app.kubernetes.io/name: mutualize
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: home
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mutualize
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: home
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        {}
      containers:
        - name: nginx
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "nginxinc/nginx-unprivileged:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            null
          volumeMounts:
            - name: html
              readOnly: true
              mountPath: /usr/share/nginx/html
            - name: config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: tmp
              mountPath: /tmp
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe: &probe
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            failureThreshold: 5
          livenessProbe:
            <<: *probe
            periodSeconds: 120
      volumes:
        - name: html
          configMap:
            name: test-mutualize-home-html
        - name: config
          configMap:
            name: test-mutualize-home-config
        - name: tmp
          emptyDir: {}
---
# Source: mutualize/templates/print-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-mutualize-print
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: print
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 25%
  selector:
    matchLabels:
      app.kubernetes.io/name: mutualize
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: print
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mutualize
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: print
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        {}
      initContainers:
        - name: jmx-exporter
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "bitnami/jmx-exporter:0.20.0"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          command:
            - /bin/bash
            - -c
          args:
            - cp /opt/bitnami/jmx-exporter/jmx_prometheus_javaagent.jar /jmx-exporter-jar/
          volumeMounts:
            - mountPath: /jmx-exporter-jar
              name: jmx-exporter-jar
      containers:
        - name: config
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/shared_config_manager:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "TAG_FILTER"
              value: print
            - name: "TARGET"
              value: /config
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args: ['shared-config-slave']
          volumeMounts:
            - mountPath: /config
              name: configs
            - name: masterconfig
              readOnly: true
              mountPath: /etc/shared_config_manager
          readinessProbe: &configProbe
            exec:
              command:
                - scm-is-ready
            initialDelaySeconds: 30
            periodSeconds: 30
            failureThreshold: 5
          livenessProbe:
            <<: *configProbe
            periodSeconds: 120
          ports:
            - name: prometheus-conf
              containerPort: 9111
              protocol: TCP
        - name: print
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/mapfish_print:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          command:
            - aaa
          args:
            - bbb
            - ccc
          volumeMounts:
            - name: configs
              mountPath: /usr/local/tomcat/webapps/ROOT/print-apps
            - name: web-xml
              mountPath: /usr/local/tomcat/webapps/ROOT/WEB-INF/web.xml
              subPath: web.xml
            - name: jmx-exporter-config
              mountPath: /usr/local/tomcat/jmx-exporter.yaml
              subPath: jmx-exporter.yaml
            - mountPath: /usr/local/tomcat/jmx-lib
              name: jmx-exporter-jar
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: prometheus
              containerPort: 9110
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /print/metrics/ping?health_check=true
              port: http
            initialDelaySeconds: 15
            periodSeconds: 30
          livenessProbe:
            exec:
              # Be sure that the EPSG 2056 exists, see: https://jira.camptocamp.com/browse/GSGMF-1606
              command:
                - curl
                - http://localhost:8080/print/examples:simple/buildreport.pdf
                - --data-raw
                - spec=%7B%0D%0A++++%22layout%22%3A+%22A4+portrait%22%2C%0D%0A++++%22attributes%22%3A+%7B%22map%22%3A+%7B%0D%0A++++++++%22center%22%3A+%5B%0D%0A++++++++++++1200000%2C%0D%0A++++++++++++2600000%0D%0A++++++++%5D%2C%0D%0A++++++++%22rotation%22%3A+0%2C%0D%0A++++++++%22longitudeFirst%22%3A+true%2C%0D%0A++++++++%22layers%22%3A+%5B%5D%2C%0D%0A++++++++%22scale%22%3A+100000000%2C%0D%0A++++++++%22projection%22%3A+%22EPSG%3A2056%22%2C%0D%0A++++++++%22dpi%22%3A+72%0D%0A++++%7D%7D%0D%0A%7D
            initialDelaySeconds: 15
            failureThreshold: 50
            periodSeconds: 120
          lifecycle:
            preStop:
              exec:
                command: ['/bin/bash', '-c', '/usr/local/tomcat/bin/docker_pre_stop_print.sh $(PRINT_TERMINATION_GRACE_PERIOD_SECONDS) || true']
      volumes:
        - name: configs
          emptyDir: {}
        - name: jmx-exporter-jar
          emptyDir: {}
        - name: masterconfig
          configMap:
            name: test-mutualize-config
        - name: web-xml
          configMap:
            name: test-mutualize-print
            items:
              - key: web.xml
                path: web.xml
        - name: jmx-exporter-config
          configMap:
            name: test-mutualize-print
            items:
              - key: jmx-exporter.yaml
                path: jmx-exporter.yaml
---
# Source: mutualize/templates/redirect-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-mutualize-redirect
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: redirect
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mutualize
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: redirect
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mutualize
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: redirect
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        {}
      containers:
        - name: redirect
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/redirect:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          volumeMounts:
            - name: hosts
              mountPath: /etc/redirect
            - mountPath: /tmp
              name: tmp-volume
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /redirect/c2c/health_check
              port: http
            initialDelaySeconds: 5
            timeoutSeconds: 10
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /redirect/c2c/health_check
              port: http
            initialDelaySeconds: 5
            timeoutSeconds: 10
            periodSeconds: 60
      volumes:
        - name: tmp-volume
          emptyDir: {}
        - name: hosts
          configMap:
            name: test-mutualize-redirect-hosts
---
# Source: mutualize/templates/shared-config-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-mutualize-config
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: config
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mutualize
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: config
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mutualize
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: config
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        {}
      containers:
        - name: shared-config
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/shared_config_manager:3.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: "C2C_REDIS_TIMEOUT"
              value: "30"
            - name: "C2C_SECRET"
              value: secret
            - name: "CONFIG_SERVICE_NAME"
              valueFrom:
                configMapKeyRef:
                  name: "test-mutualize-env"
                  key: "CONFIG_SERVICE_NAME"
            - name: "LOG_LEVEL"
              value: DEBUG
            - name: "LOG_TYPE"
              value: console
            - name: "MASTER_CONFIG"
              value: ""
            - name: "REDIS_DB"
              value: "1"
            - name: "SCM_ENV_PREFIXES"
              value: TEST_
            - name: "API_BASE_URL"
              value: http://$(CONFIG_SERVICE_NAME):8080/
            - name: "C2C_BROADCAST_PREFIX"
              value: broadcast_config_$(REDIS_DB)_
            - name: "C2C_REDIS_URL"
              value: redis://test-redis-master/$(REDIS_DB)
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: prometheus
              containerPort: 9110
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /c2c/health_check
              port: http
            initialDelaySeconds: 10
          volumeMounts:
            - name: ssh-key
              readOnly: true
              mountPath: /var/www/.ssh2
            - name: masterconfig
              readOnly: true
              mountPath: /etc/shared_config_manager
      volumes:
        - name: ssh-key
          secret:
            secretName: test-mutualize
            defaultMode: 0440
        - name: masterconfig
          configMap:
            name: test-mutualize-config
---
# Source: mutualize/templates/tilecloudchain-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-mutualize-tcc
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: tcc
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mutualize
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: tcc
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mutualize
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: tcc
        foo: bar
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        {}
      initContainers:
        - name: init-main-config
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfishdemo-config:prod-2-8"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            null
          command:
            - cp
            - /etc/tilecloudchain-main-original/config.yaml
            - /etc/tilecloudchain-main/
          volumeMounts:
            - name: originalmainconfig
              mountPath: /etc/tilecloudchain-main-original
            - name: mainconfig
              mountPath: /etc/tilecloudchain-main
      containers:
        - name: config
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/shared_config_manager:3.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: "C2C_REDIS_TIMEOUT"
              value: "30"
            - name: "C2C_SECRET"
              value: secret
            - name: "CONFIG_SERVICE_NAME"
              valueFrom:
                configMapKeyRef:
                  name: "test-mutualize-env"
                  key: "CONFIG_SERVICE_NAME"
            - name: "LOG_LEVEL"
              value: DEBUG
            - name: "LOG_TYPE"
              value: console
            - name: "MASTER_CONFIG"
              value: |
                type: git
                repo: 'https://github.com/camptocamp/helm-mutualize.git'
                branch: master
                key: secret
                sub_dir: tests/shared-config
                sparse: false
            - name: "REDIS_DB"
              value: "1"
            - name: "TAG_FILTER"
              value: tilecloudchain
            - name: "TARGET"
              value: /config
            - name: "API_BASE_URL"
              value: http://$(CONFIG_SERVICE_NAME):8080/
            - name: "C2C_BROADCAST_PREFIX"
              value: broadcast_config_$(REDIS_DB)_
            - name: "C2C_REDIS_URL"
              value: redis://test-redis-master/$(REDIS_DB)
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args: ['shared-config-slave']
          readinessProbe: &configProbe
            exec:
              command:
                - scm-is-ready
            initialDelaySeconds: 30
            periodSeconds: 30
            failureThreshold: 5
          livenessProbe:
            <<: *configProbe
            periodSeconds: 120
          volumeMounts:
            - name: configs
              mountPath: /config
            - name: masterconfig
              readOnly: true
              mountPath: /etc/shared_config_manager
          ports:
            - name: prometheus-conf
              containerPort: 9111
              protocol: TCP
        - name: tilecloudchain
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/tilecloud-chain:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "C2C_SECRET"
              value: secret
            - name: "REDIS_DB"
              value: "3"
            - name: "TILEGENERATION_HOSTSFILE"
              value: /etc/tilecloudchain-hosts/hosts.yaml
            - name: "TILEGENERATION_MAIN_CONFIGFILE"
              value: /etc/tilecloudchain-main/config.yaml
            - name: "C2C_BROADCAST_PREFIX"
              value: broadcast_scm_$(REDIS_DB)_
            - name: "C2C_REDIS_URL"
              value: redis://test-redis-master/$(REDIS_DB)
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          volumeMounts:
            - name: configs
              mountPath: /etc/tilecloudchain-configs
            - name: hosts
              mountPath: /etc/tilecloudchain-hosts
            - name: mainconfig
              mountPath: /etc/tilecloudchain-main
            - mountPath: /tmp
              name: tmp-volume
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: prometheus
              containerPort: 9110
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /tiles/c2c/health_check
              port: http
            initialDelaySeconds: 5
            timeoutSeconds: 10
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /tiles/c2c/health_check
              port: http
            initialDelaySeconds: 5
            timeoutSeconds: 10
            periodSeconds: 60
      volumes:
        - name: configs
          emptyDir: {}
        - name: tmp-volume
          emptyDir: {}
        - name: mainconfig
          emptyDir: {}
        - name: hosts
          configMap:
            name: test-mutualize-tcc-hosts
        - name: originalmainconfig
          configMap:
            name: test-mutualize-tcc-main-config
        - name: masterconfig
          configMap:
            name: test-mutualize-config
---
# Source: mutualize/templates/tilecloudchain-slave-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-mutualize-tcc-slave
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: tcc-slave
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: mutualize
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: tcc-slave
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mutualize
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: tcc-slave
        foo: bar
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        {}
      initContainers:
        - name: init-main-config
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfishdemo-config:prod-2-8"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            null
          command:
            - cp
            - /etc/tilecloudchain-main-original/config.yaml
            - /etc/tilecloudchain-main/
          volumeMounts:
            - name: originalmainconfig
              mountPath: /etc/tilecloudchain-main-original
            - name: mainconfig
              mountPath: /etc/tilecloudchain-main
      containers:
        - name: config
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/shared_config_manager:3.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: "C2C_REDIS_TIMEOUT"
              value: "30"
            - name: "C2C_SECRET"
              value: secret
            - name: "CONFIG_SERVICE_NAME"
              valueFrom:
                configMapKeyRef:
                  name: "test-mutualize-env"
                  key: "CONFIG_SERVICE_NAME"
            - name: "LOG_LEVEL"
              value: DEBUG
            - name: "LOG_TYPE"
              value: console
            - name: "MASTER_CONFIG"
              value: |
                type: git
                repo: 'https://github.com/camptocamp/helm-mutualize.git'
                branch: master
                key: secret
                sub_dir: tests/shared-config
                sparse: false
            - name: "REDIS_DB"
              value: "1"
            - name: "TAG_FILTER"
              value: tilecloudchain
            - name: "TARGET"
              value: /config
            - name: "API_BASE_URL"
              value: http://$(CONFIG_SERVICE_NAME):8080/
            - name: "C2C_BROADCAST_PREFIX"
              value: broadcast_config_$(REDIS_DB)_
            - name: "C2C_REDIS_URL"
              value: redis://test-redis-master/$(REDIS_DB)
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args: ['shared-config-slave']
          readinessProbe: &configProbe
            exec:
              command:
                - scm-is-ready
            initialDelaySeconds: 30
            periodSeconds: 30
            failureThreshold: 5
          livenessProbe:
            <<: *configProbe
            periodSeconds: 120
          volumeMounts:
            - name: configs
              mountPath: /config
            - name: masterconfig
              readOnly: true
              mountPath: /etc/shared_config_manager
          ports:
            - name: prometheus-conf
              containerPort: 9111
              protocol: TCP
        - name: tilecloudchain
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/tilecloud-chain:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: "C2C_SECRET"
              value: secret
            - name: "REDIS_DB"
              value: "3"
            - name: "TILEGENERATION_HOSTSFILE"
              value: /etc/tilecloudchain-hosts/hosts.yaml
            - name: "TILEGENERATION_MAIN_CONFIGFILE"
              value: /etc/tilecloudchain-main/config.yaml
            - name: "C2C_BROADCAST_PREFIX"
              value: broadcast_scm_$(REDIS_DB)_
            - name: "C2C_REDIS_URL"
              value: redis://test-redis-master/$(REDIS_DB)
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args: ["generate-tiles", "--role=slave", "--daemon"]
          volumeMounts:
            - name: configs
              mountPath: /etc/tilecloudchain-configs
            - name: hosts
              mountPath: /etc/tilecloudchain-hosts
            - name: mainconfig
              mountPath: /etc/tilecloudchain-main
            - mountPath: /tmp
              name: tmp-volume
          ports:
            - name: prometheus
              containerPort: 9110
              protocol: TCP
      volumes:
        - name: configs
          emptyDir: {}
        - name: tmp-volume
          emptyDir: {}
        - name: mainconfig
          emptyDir: {}
        - name: hosts
          configMap:
            name: test-mutualize-tcc-hosts
        - name: originalmainconfig
          configMap:
            name: test-mutualize-tcc-main-config
        - name: masterconfig
          configMap:
            name: test-mutualize-config
---
# Source: mutualize/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-mutualize-main
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  tls:
    - hosts:
        - mutualize.local
      secretName: test-tls
  rules:
    - host: mutualize.local
      http:
        paths:
          - path: /print
            pathType: Prefix
            backend:
              service:
                name: test-mutualize-print
                port:
                  number: 80
          - path: /config
            pathType: Prefix
            backend:
              service:
                name: test-mutualize-config
                port:
                  number: 80
          - path: /test/print
            pathType: Prefix
            backend:
              service:
                name: test-mutualize-print
                port:
                  number: 80
          - path: /test/config
            pathType: Prefix
            backend:
              service:
                name: test-mutualize-config
                port:
                  number: 80
---
# Source: mutualize/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-mutualize-prod
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  tls:
    - hosts:
        - mutualize.prod.local
      secretName: test-prod-tls
  rules:
    - host: mutualize.prod.local
      http:
        paths:
          - path: /print
            pathType: Prefix
            backend:
              service:
                name: test-mutualize-print
                port:
                  number: 80
          - path: /config
            pathType: Prefix
            backend:
              service:
                name: test-mutualize-config
                port:
                  number: 80
          - path: /test/print
            pathType: Prefix
            backend:
              service:
                name: test-mutualize-print
                port:
                  number: 80
          - path: /test/config
            pathType: Prefix
            backend:
              service:
                name: test-mutualize-config
                port:
                  number: 80
---
# Source: mutualize/templates/print-podmonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: test-mutualize-print-config
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: print
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mutualize
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: print
  podMetricsEndpoints:
    - honorLabels: true
      interval: 10s
      port: prometheus-conf
---
# Source: mutualize/templates/print-podmonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: test-mutualize-print
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: print
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mutualize
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: print
  podMetricsEndpoints:
    - honorLabels: true
      interval: 10s
      port: prometheus
---
# Source: mutualize/templates/shared-config-podmonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: test-mutualize-config
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: config
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mutualize
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: config
  podMetricsEndpoints:
    - honorLabels: true
      interval: 10s
      port: prometheus
---
# Source: mutualize/templates/tilecloudchain-podmonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: test-mutualize-tcc-config
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: tcc
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mutualize
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: tcc
  podMetricsEndpoints:
    - honorLabels: true
      interval: 10s
      port: prometheus-conf
---
# Source: mutualize/templates/tilecloudchain-podmonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: test-mutualize-tcc
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: tcc
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mutualize
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: tcc
  podMetricsEndpoints:
    - honorLabels: true
      interval: 10s
      port: prometheus
---
# Source: mutualize/templates/tilecloudchain-podmonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: test-mutualize-tcc-slave-config
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: tcc-slave
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mutualize
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: tcc-slave
  podMetricsEndpoints:
    - honorLabels: true
      interval: 10s
      port: prometheus-conf
---
# Source: mutualize/templates/tilecloudchain-podmonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: test-mutualize-tcc-slave
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: tcc-slave
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mutualize
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: tcc-slave
  podMetricsEndpoints:
    - honorLabels: true
      interval: 10s
      port: prometheus
---
# Source: mutualize/templates/redirect-config.yaml
apiVersion: camptocamp.com/v3
kind: SharedConfigConfigInt
metadata:
  name: test-mutualize-redirect-hosts
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: redirect-hosts
  annotations:
    test: redirectConfig
spec:
  matchLabels:
    mutualize-redirect-hosts: 'true'
  configmapName: hosts.yaml
  property: sources
---
# Source: mutualize/templates/shared-config-config.yaml
apiVersion: camptocamp.com/v3
kind: SharedConfigConfigInt
metadata:
  name: test-mutualize-config
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: config
  annotations:
    test: sharedConfig
spec:
  matchLabels:
    mutualize-sharedconfig: 'true'
  property: sources
  configmapName: config.yaml
---
# Source: mutualize/templates/tilecloudchain-config-hosts.yaml
apiVersion: camptocamp.com/v3
kind: SharedConfigConfigInt
metadata:
  name: test-mutualize-tcc-hosts
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: tcc-hosts
  annotations:
    test: sharedConfig
spec:
  matchLabels:
    mutualize-tilecloudchain-hosts: 'true'
  configmapName: hosts.yaml
  property: sources
---
# Source: mutualize/templates/sharedconfig.yaml
apiVersion: camptocamp.com/v3
kind: SharedConfigSourceInt
metadata:
  name: test-mutualize-examples
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  name: examples
  content:
    repo: git@github.com:mapfish/mapfish-print.git
    type: git
    template_engines:
      - type: shell
        environment_variables: true
---
# Source: mutualize/templates/sharedconfig.yaml
apiVersion: camptocamp.com/v3
kind: SharedConfigSourceInt
metadata:
  name: test-mutualize-examples2
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
    mutualize-sharedconfig: "true"
spec:
  name: examples2
  content:
    branch: master
    repo: git@github.com:mapfish/mapfish-print.git
    sub_dir: examples/src/test/resources/examples
    tags:
    - print
    type: git
    template_engines:
      - type: shell
        environment_variables: true
        data:
          - name: "TOTO"
            value: "toto"
---
# Source: mutualize/templates/sharedconfig.yaml
apiVersion: camptocamp.com/v3
kind: SharedConfigSourceInt
metadata:
  name: test-mutualize-no-env
  labels:
    helm.sh/chart: mutualize
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mutualize
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  name: no-env
  content:
    {}
